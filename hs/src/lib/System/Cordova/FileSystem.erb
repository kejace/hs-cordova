<%
require File.expand_path(File.dirname(__FILE__) + '/../../../../rb/data.rb')
dirs = %w{
  applicationDirectory
  applicationStorageDirectory
  dataDirectory
  cacheDirectory
  externalApplicationStorageDirectory
  externalDataDirectory
  externalCacheDirectory
  externalRootDirectory
  tempDirectory
  syncedDataDirectory
  documentsDirectory
  sharedDirectory
}
%>
{-# LANGUAGE JavaScriptFFI #-}
module System.Cordova.FileSystem
( <%= dirs.join(', ') %>
, Storage(..)
, FileError(..), FileErrorCode(..)
, FileSystem
, requestFileSystem
, Entry, Dir, File
, root, filesystem
, fullPath, name
, toURL, toInternalURL
, isFile, isDirectory, classifyEntry, genericEntry
, Metadata(..), getMetadata
, remove, removeRecursively, moveTo, copyTo
, getParent
, resolveLocalFileSystemURL
, GetFlags(..), getFile, getDirectory
, DirReader, createReader, readEntries
, readAllEntries
, FileObject, file
, readAsText, readAsBinaryString, readAsDataURL
) where

import GHCJS.Types
import GHCJS.Foreign
import GHCJS.Marshal
import System.Cordova.Internal
import System.IO.Unsafe (unsafePerformIO)
import Control.Monad ((>=>))
import Data.Time.Clock
<%= hsImports %>

<% dirs.each do |dir| %>
foreign import javascript unsafe
  "cordova.file.<%= dir %>"
  js_<%= dir %> :: JSRef (Maybe String)
<%= dir %>      :: Maybe String
<%= dir %> = unsafePerformIO $ fromRefMaybe js_<%= dir %>
<% end %>

<%= makeEnum('FileErrorCode', %w{
  NOT_FOUND_ERR
  SECURITY_ERR
  ABORT_ERR
  NOT_READABLE_ERR
  ENCODING_ERR
  NO_MODIFICATION_ALLOWED_ERR
  INVALID_STATE_ERR
  SYNTAX_ERR
  INVALID_MODIFICATION_ERR
  QUOTA_EXCEEDED_ERR
  TYPE_MISMATCH_ERR
  PATH_EXISTS_ERR
}.map do |err|
  Tag.new(err.split('_').map(&:capitalize).join(''), err)
end, 'FileError.') %>

<%= makeRecord('FileError', [
  Field.new('FileErrorCode', 'code'),
], false) %>

<%= makeEnum('Storage', %w{
  Temporary
  Persistent
}, 'window.') %>

data FileSystem_
type FileSystem = JSRef FileSystem_

foreign import javascript interruptible
  "requestFileSystem($1, $2, hs_good($c), hs_error($c));"
  js_requestFileSystem :: JSRef Storage -> Double  -> IO (JSEitherRef FileError FileSystem)
requestFileSystem      :: Storage       -> Integer -> IO (Either      FileError FileSystem)
requestFileSystem stor size = do
  stor' <- toJSRef stor
  js_requestFileSystem stor' (fromIntegral size) >>= fromJSEitherRef

data File
data Dir
data Entry_ a
type Entry a = JSRef (Entry_ a)

foreign import javascript unsafe
  "$1.root" root :: FileSystem -> Entry Dir

foreign import javascript unsafe
  "$1.filesystem" filesystem :: Entry a -> FileSystem

<% %w{fullPath name}.each do |f| %>
foreign import javascript unsafe
  "$1.<%= f %>"
  js_<%= f %> :: Entry a -> JSString
<%= f %>      :: Entry a -> FilePath
<%= f %> = fromJSString . js_<%= f %>
<% end %>

<% %w{toURL toInternalURL}.each do |f| %>
foreign import javascript unsafe
  "$1.<%= f %>()"
  js_<%= f %> :: Entry a -> JSString
<%= f %>      :: Entry a -> String
<%= f %> = fromJSString . js_<%= f %>
<% end %>

foreign import javascript unsafe
  "$1.isFile" isFile :: Entry a -> Bool

foreign import javascript unsafe
  "$1.isDirectory" isDirectory :: Entry a -> Bool

classifyEntry :: Entry a -> Either (Entry File) (Entry Dir)
classifyEntry e = if isFile e then Left (castRef e) else Right (castRef e)

genericEntry :: Entry a -> Entry ()
genericEntry = castRef

<%= makeRecord('Metadata', [
  Field.new('UTCTime', 'modificationTime'),
], false) %>

foreign import javascript interruptible
  "$1.getMetadata(hs_good($c), hs_error($c));"
  js_getMetadata :: Entry a -> IO (JSEitherRef FileError Metadata)
getMetadata      :: Entry a -> IO (Either      FileError Metadata)
getMetadata = js_getMetadata >=> fromJSEitherRef

-- TODO: setMetadata

<% %w{remove removeRecursively}.each do |f|
  entryType = f == 'removeRecursively' ? 'Dir' : 'a' %>
foreign import javascript interruptible
  "$1.<%= f %>(hs_good($c), hs_error($c));"
  js_<%= f %> :: Entry <%= entryType %> -> IO (JSEitherRef FileError ())
<%= f %>      :: Entry <%= entryType %> -> IO (Either      FileError ())
<%= f %> = js_<%= f %> >=> fromJSEitherRef
<% end %>

<% %w{moveTo copyTo}.each do |f| %>
foreign import javascript interruptible
  "$3.<%= f %>($1, $2, hs_good($c), hs_error($c));"
  js_<%= f %> :: Entry Dir -> JSRef (Maybe String) -> Entry a -> IO (JSEitherRef FileError (Entry a))
<%= f %>      :: Entry Dir -> Maybe FilePath       -> Entry a -> IO (Either      FileError (Entry a))
<%= f %> dir new old = do
  new' <- toJSRef new
  js_<%= f %> dir new' old >>= fromJSEitherRef
<% end %>

foreign import javascript interruptible
  "$1.getParent(hs_good($c), hs_error($c));"
  js_getParent :: Entry a -> IO (JSEitherRef FileError (Entry Dir))
getParent      :: Entry a -> IO (Either      FileError (Entry Dir))
getParent = js_getParent >=> fromJSEitherRef

foreign import javascript interruptible
  "resolveLocalFileSystemURL($1, hs_good($c), hs_error($c));"
  js_resolveLocalFileSystemURL :: JSString -> IO (JSEitherRef FileError (Entry ()))
resolveLocalFileSystemURL      :: String   -> IO (Either      FileError (Entry ()))
resolveLocalFileSystemURL =
  js_resolveLocalFileSystemURL . toJSString >=> fromJSEitherRef

<%= makeEnum('GetFlags', [
  Tag.new('Exclusive', '{create: true, exclusive: true}' ),
  Tag.new('Create'   , '{create: true, exclusive: false}'),
  Tag.new('NoCreate' , '{create: false}'                 ),
]) %>

<% %w{getFile getDirectory}.each do |f|
  entryType = f == 'getFile' ? 'File' : 'Dir' %>
foreign import javascript interruptible
  "$3.<%= f %>($1, $2, hs_good($c), hs_error($c));"
  js_<%= f %> :: JSString -> JSRef GetFlags -> Entry Dir -> IO (JSEitherRef FileError (Entry <%= entryType %>))
<%= f %>      :: FilePath -> GetFlags       -> Entry Dir -> IO (Either      FileError (Entry <%= entryType %>))
<%= f %> f flags dir = do
  flags' <- toJSRef flags
  js_<%= f %> (toJSString f) flags' dir >>= fromJSEitherRef
<% end %>

data DirReader_
type DirReader = JSRef DirReader_

foreign import javascript unsafe
  "$1.createReader()"
  createReader :: Entry Dir -> IO DirReader

foreign import javascript interruptible
  "$1.readEntries(hs_good($c), hs_error($c));"
  js_readEntries :: DirReader -> IO (JSEitherRef FileError [Entry ()])
readEntries      :: DirReader -> IO (Either      FileError [Entry ()])
readEntries = js_readEntries >=> fromJSEitherRef

readAllEntries :: Entry Dir -> IO (Either FileError [Entry ()])
readAllEntries dir = do
  r <- createReader dir
  let go ents = readEntries r >>= \res -> case res of
        Left e -> return $ Left e
        Right [] -> return $ Right ents
        Right ents' -> go $ ents' ++ ents
  go []

data FileObject_
type FileObject = JSRef FileObject_

foreign import javascript interruptible
  "$1.file(hs_good($c), hs_error($c));"
  js_file :: Entry File -> IO (JSEitherRef FileError FileObject)
file      :: Entry File -> IO (Either      FileError FileObject)
file = js_file >=> fromJSEitherRef

<% %w{readAsText readAsBinaryString readAsDataURL}.each do |f| %>
foreign import javascript interruptible
  "hs_readFile('<%= f %>', $1, $c);"
  js_<%= f %> :: FileObject -> IO JSString
<%= f %>      :: FileObject -> IO String
<%= f %> = fmap fromJSString . js_<%= f %>
<% end %>
