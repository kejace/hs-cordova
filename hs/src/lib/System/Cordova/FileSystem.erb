<%
require File.expand_path(File.dirname(__FILE__) + '/../../../../rb/data.rb')
dirs = %w{
  applicationDirectory
  applicationStorageDirectory
  dataDirectory
  cacheDirectory
  externalApplicationStorageDirectory
  externalDataDirectory
  externalCacheDirectory
  externalRootDirectory
  tempDirectory
  syncedDataDirectory
  documentsDirectory
  sharedDirectory
}
%>
{-# LANGUAGE JavaScriptFFI #-}
module System.Cordova.FileSystem
( <%= dirs.join(', ') %>
, Storage(..)
, FileErrorCode(..)
, FileSystem_, FileSystem
, requestFileSystem
, Entry_, Entry
, root, filesystem
, fullPath, name, isFile, isDirectory
, Metadata(..), getMetadata
, remove, moveTo, copyTo
, getParent
) where

import GHCJS.Types (JSRef)
import System.Cordova.Internal
import System.IO.Unsafe (unsafePerformIO)
import Control.Monad ((>=>))
import Data.Time.Clock
import Data.Bitraversable (bitraverse)
<%= hsImports %>

<%=
lines = []
dirs.each do |dir|
  lines << "foreign import javascript unsafe \"cordova.file.#{dir}\" js_#{dir} :: JSRef (Maybe String)"
  lines << "#{dir} :: Maybe String"
  lines << "#{dir} = unsafePerformIO $ fromRefMaybe js_#{dir}"
  lines << ''
end
lines.join("\n")
%>

<%= makeEnum('FileErrorCode', %w{
  NOT_FOUND_ERR
  SECURITY_ERR
  ABORT_ERR
  NOT_READABLE_ERR
  ENCODING_ERR
  NO_MODIFICATION_ALLOWED_ERR
  INVALID_STATE_ERR
  SYNTAX_ERR
  INVALID_MODIFICATION_ERR
  QUOTA_EXCEEDED_ERR
  TYPE_MISMATCH_ERR
  PATH_EXISTS_ERR
}.map do |err|
  Tag.new(err.split('_').map(&:capitalize).join(''), err)
end, 'FileError.') %>

<%= makeRecord('FileError', [
  Field.new('FileErrorCode', 'code'),
], false) %>

<%= makeEnum('Storage', %w{
  Temporary
  Persistent
}, 'window.') %>

data FileSystem_
type FileSystem = JSRef FileSystem_

foreign import javascript interruptible
  "requestFileSystem($1, $2, hs_good($c), hs_error($c));"
  js_requestFileSystem
  :: JSRef Storage -> Double -> IO (JSEither (JSRef FileError) FileSystem)

requestFileSystem :: Storage -> Integer -> IO (Either FileError FileSystem)
requestFileSystem stor size = do
  stor' <- toJSRef stor
  res <- js_requestFileSystem stor' $ fromIntegral size
  fromJSEither res >>= bitraverse fromJSRef' return

data Entry_
type Entry = JSRef Entry_

foreign import javascript unsafe
  "$1.root" root :: FileSystem -> Entry

foreign import javascript unsafe
  "$1.filesystem" filesystem :: Entry -> FileSystem

foreign import javascript unsafe
  "$1.fullPath" js_fullPath :: Entry -> JSString
fullPath :: Entry -> FilePath
fullPath = fromJSString . js_fullPath

foreign import javascript unsafe
  "$1.name" js_name :: Entry -> JSString
name :: Entry -> FilePath
name = fromJSString . js_name

foreign import javascript unsafe
  "$1.isFile" isFile :: Entry -> Bool

foreign import javascript unsafe
  "$1.isDirectory" isDirectory :: Entry -> Bool

<%= makeRecord('Metadata', [
  Field.new('UTCTime', 'modificationTime'),
], false) %>

foreign import javascript interruptible
  "$1.getMetadata(hs_good($c), hs_error($c));"
  js_getMetadata :: Entry -> IO (JSEither (JSRef FileError) (JSRef Metadata))
getMetadata :: Entry -> IO (Either FileError Metadata)
getMetadata = js_getMetadata >=> fromJSEither'

foreign import javascript interruptible
  "$1.remove(hs_good($c), hs_error($c));"
  js_remove :: Entry -> IO (JSEither (JSRef FileError) (JSRef ()))
remove :: Entry -> IO (Either FileError ())
remove = js_remove >=> fromJSEither'

<% %w{moveTo copyTo}.each do |f| %>
foreign import javascript interruptible
  "$3.<%= f %>($1, $2, hs_good($c), hs_error($c));"
  js_<%= f %>
  :: Entry -> JSRef (Maybe String) -> Entry
  -> IO (JSEither (JSRef FileError) Entry)
<%= f %> :: Entry -> Maybe FilePath -> Entry -> IO (Either FileError Entry)
<%= f %> dir new old = do
  new' <- toJSRef new
  js_<%= f %> dir new' old >>= fromJSEither >>= bitraverse fromJSRef' return
<% end %>

foreign import javascript interruptible
  "$1.getParent(hs_good($c), hs_error($c));"
  js_getParent :: Entry -> IO (JSEither (JSRef FileError) Entry)
getParent :: Entry -> IO (Either FileError Entry)
getParent = js_getParent >=> fromJSEither >=> bitraverse fromJSRef' return
