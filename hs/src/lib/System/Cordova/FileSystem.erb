<%
require File.expand_path(File.dirname(__FILE__) + '/../../../../rb/data.rb')
dirs = %w{
  applicationDirectory
  applicationStorageDirectory
  dataDirectory
  cacheDirectory
  externalApplicationStorageDirectory
  externalDataDirectory
  externalCacheDirectory
  externalRootDirectory
  tempDirectory
  syncedDataDirectory
  documentsDirectory
  sharedDirectory
}
%>
{-# LANGUAGE JavaScriptFFI #-}
module System.Cordova.FileSystem
( <%= dirs.join(', ') %>
, Storage(..)
, FileError(..), FileErrorCode(..)
, FileSystem
, requestFileSystem
, Entry, Dir, File
, root, filesystem
, fullPath, name
, toURL, toInternalURL
, isFile, isDirectory, classifyEntry, genericEntry
, Metadata(..), getMetadata
, remove, removeRecursively, moveTo, copyTo
, getParent
, resolveLocalFileSystemURL
, GetFlags(..), getFile, getDirectory
, DirReader, createReader, readEntries
, readAllEntries
, FileObject, file
, readAsText, readAsBinaryString, readAsDataURL, readAsBinary
, FileWriter, Blob
, createWriter, seek, textBlob, writeBlob
) where

import GHCJS.Types
import GHCJS.Marshal
import Data.Time.Clock
import qualified Data.ByteString.Char8 as B8
<%= hsImports %>

<% dirs.each do |dir| %>
<%= jsImport("cordova.file.#{dir}", [], 'Maybe String', isIO: false) %>
<% end %>

<%= makeEnum('FileErrorCode', %w{
  NOT_FOUND_ERR
  SECURITY_ERR
  ABORT_ERR
  NOT_READABLE_ERR
  ENCODING_ERR
  NO_MODIFICATION_ALLOWED_ERR
  INVALID_STATE_ERR
  SYNTAX_ERR
  INVALID_MODIFICATION_ERR
  QUOTA_EXCEEDED_ERR
  TYPE_MISMATCH_ERR
  PATH_EXISTS_ERR
}.map do |err|
  Tag.new(err.split('_').map(&:capitalize).join(''), err)
end, exprPrefix: 'FileError.') %>

<%= makeRecord('FileError', [
  Field.new('FileErrorCode', 'code'),
], instanceDefault: false) %>

<%= makeEnum('Storage', %w{
  Temporary
  Persistent
}, exprPrefix: 'window.') %>

data FileSystem_
type FileSystem = JSRef FileSystem_

<%= jsImport(
  'requestFileSystem($1, $2, hs_good($c), hs_error($c));',
  ['Storage', 'Integer'], 'Either FileError FileSystem',
) %>

data File
data Dir
data Entry_ a
type Entry a = JSRef (Entry_ a)

<%= jsImport('$1.root'      , ['FileSystem'], 'Entry Dir' , isIO: false) %>
<%= jsImport('$1.filesystem', ['Entry a'   ], 'FileSystem', isIO: false) %>

<%= jsImport("$1.fullPath"       , ['Entry a'], 'FilePath', isIO: false) %>
<%= jsImport("$1.name"           , ['Entry a'], 'FilePath', isIO: false) %>
<%= jsImport("$1.toURL()"        , ['Entry a'], 'String'  , isIO: false) %>
<%= jsImport("$1.toInternalURL()", ['Entry a'], 'String'  , isIO: false) %>

<%= jsImport('$1.isFile'     , ['Entry a'], 'Bool', isIO: false) %>
<%= jsImport('$1.isDirectory', ['Entry a'], 'Bool', isIO: false) %>

classifyEntry :: Entry a -> Either (Entry File) (Entry Dir)
classifyEntry e
  | isFile      e = Left  $ castRef e
  | isDirectory e = Right $ castRef e
  | otherwise     = error "classifyEntry: Entry is neither File nor Dir"

genericEntry :: Entry a -> Entry ()
genericEntry = castRef

<%= makeRecord('Metadata', [
  Field.new('UTCTime', 'modificationTime'),
], instanceDefault: false) %>

<%= jsImport(
  '$1.getMetadata(hs_good($c), hs_error($c));',
  ['Entry a'], 'Either FileError Metadata',
) %>

-- TODO: setMetadata

<%= jsImport(
  '$1.remove(hs_good($c), hs_error($c));',
  ['Entry a'], 'Either FileError ()',
) %>

<%= jsImport(
  '$1.removeRecursively(hs_good($c), hs_error($c));',
  ['Entry Dir'], 'Either FileError ()',
) %>

<% %w{moveTo copyTo}.each do |f| %>
<%= jsImport(
  "$1.#{f}(hs_good($c), hs_error($c));",
  ['Entry Dir', 'Maybe FilePath', 'Entry a'], 'Either FileError (Entry a)',
) %>
<% end %>

<%= jsImport(
  '$1.getParent(hs_good($c), hs_error($c));',
  ['Entry a'], 'Either FileError (Entry Dir)',
) %>

<%= jsImport(
  'resolveLocalFileSystemURL($1, hs_good($c), hs_error($c));',
  ['String'], 'Either FileError (Entry ())',
) %>

<%= makeEnum('GetFlags', [
  Tag.new('Exclusive', '{create: true, exclusive: true}' ),
  Tag.new('Create'   , '{create: true, exclusive: false}'),
  Tag.new('NoCreate' , '{create: false}'                 ),
], instanceFrom: false) %>

<%= jsImport(
  '$3.getFile($1, $2, hs_good($c), hs_error($c));',
  ['FilePath', 'GetFlags', 'Entry Dir'], 'Either FileError (Entry File)',
) %>

<%= jsImport(
  '$3.getDirectory($1, $2, hs_good($c), hs_error($c));',
  ['FilePath', 'GetFlags', 'Entry Dir'], 'Either FileError (Entry Dir)',
) %>

data DirReader_
type DirReader = JSRef DirReader_

<%= jsImport('$1.createReader()', ['Entry Dir'], 'DirReader') %>

<%= jsImport(
  '$1.readEntries(hs_good($c), hs_error($c));',
  ['DirReader'], 'Either FileError [Entry ()]',
) %>

readAllEntries :: Entry Dir -> IO (Either FileError [Entry ()])
readAllEntries dir = do
  r <- createReader dir
  let go ents = readEntries r >>= \res -> case res of
        Left e -> return $ Left e
        Right [] -> return $ Right ents
        Right ents' -> go $ ents' ++ ents
  go []

data FileObject_
type FileObject = JSRef FileObject_

<%= jsImport(
  '$1.file(hs_good($c), hs_error($c));',
  ['Entry File'], 'Either FileError FileObject',
) %>

<% %w{readAsText readAsBinaryString readAsDataURL}.each do |f| %>
<%= jsImport("hs_readFile('#{f}', $1, $c);", ['FileObject'], 'Either FileError String') %>
<% end %>

-- TODO: better implementation
readAsBinary :: FileObject -> IO (Either FileError B8.ByteString)
readAsBinary = fmap (fmap B8.pack) . readAsBinaryString

data FileWriter_
type FileWriter = JSRef FileWriter_

<%= jsImport(
  '$1.createWriter(hs_good($c), hs_error($c));',
  ['Entry File'], 'Either FileError FileWriter'
) %>

<%= jsImport('$1.seek($2);', ['FileWriter', 'Int'], '()') %>

data Blob_
type Blob = JSRef Blob_

<%= jsImport(
  'new Blob([$1], {type: "text/plain"})',
  ['String'], 'Blob', hsName: 'textBlob', isIO: false,
) %>

<%= jsImport(
  'hs_writeBlob($1, $2, $c);', ['Blob', 'FileWriter'], 'Either FileError ()',
  hsName: 'writeBlob',
) %>
