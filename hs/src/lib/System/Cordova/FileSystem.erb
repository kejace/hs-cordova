<%
require File.expand_path(File.dirname(__FILE__) + '/../../../../rb/data.rb')
dirs = %w{
  applicationDirectory
  applicationStorageDirectory
  dataDirectory
  cacheDirectory
  externalApplicationStorageDirectory
  externalDataDirectory
  externalCacheDirectory
  externalRootDirectory
  tempDirectory
  syncedDataDirectory
  documentsDirectory
  sharedDirectory
}
%>
{-# LANGUAGE JavaScriptFFI #-}
module System.Cordova.FileSystem
( <%= dirs.join(', ') %>
, Storage(..)
, FileError(..), FileErrorCode(..)
, FileSystem
, requestFileSystem
, Entry, Dir, File
, root, filesystem
, fullPath, name
, toURL, toInternalURL
, isFile, isDirectory, classifyEntry, genericEntry
, Metadata(..), getMetadata
, remove, removeRecursively, moveTo, copyTo
, getParent
, resolveLocalFileSystemURL
, GetFlags(..), getFile, getDirectory
, DirReader, createReader, readEntries
, readAllEntries
, FileObject, file
, readAsText, readAsBinaryString, readAsDataURL
) where

import GHCJS.Types
import GHCJS.Foreign
import GHCJS.Marshal
import System.Cordova.Internal
import System.IO.Unsafe (unsafePerformIO)
import Data.Time.Clock
<%= hsImports %>

<% dirs.each do |dir| %>
foreign import javascript unsafe
  "cordova.file.<%= dir %>"
  js_<%= dir %> :: JSRef (Maybe String)
<%= dir %>      :: Maybe String
<%= dir %> = unsafePerformIO $ fromRefMaybe js_<%= dir %>
<% end %>

<%= makeEnum('FileErrorCode', %w{
  NOT_FOUND_ERR
  SECURITY_ERR
  ABORT_ERR
  NOT_READABLE_ERR
  ENCODING_ERR
  NO_MODIFICATION_ALLOWED_ERR
  INVALID_STATE_ERR
  SYNTAX_ERR
  INVALID_MODIFICATION_ERR
  QUOTA_EXCEEDED_ERR
  TYPE_MISMATCH_ERR
  PATH_EXISTS_ERR
}.map do |err|
  Tag.new(err.split('_').map(&:capitalize).join(''), err)
end, 'FileError.') %>

<%= makeRecord('FileError', [
  Field.new('FileErrorCode', 'code'),
], false) %>

<%= makeEnum('Storage', %w{
  Temporary
  Persistent
}, 'window.') %>

data FileSystem_
type FileSystem = JSRef FileSystem_

<%= twoCallbacks(nil,
  'requestFileSystem($1, $2, hs_good($c), hs_error($c));',
  ['Storage', 'Integer'], 'FileError', 'FileSystem',
) %>

data File
data Dir
data Entry_ a
type Entry a = JSRef (Entry_ a)

foreign import javascript unsafe
  "$1.root" root :: FileSystem -> Entry Dir

foreign import javascript unsafe
  "$1.filesystem" filesystem :: Entry a -> FileSystem

<% %w{fullPath name}.each do |f| %>
foreign import javascript unsafe
  "$1.<%= f %>"
  js_<%= f %> :: Entry a -> JSString
<%= f %>      :: Entry a -> FilePath
<%= f %> = fromJSString . js_<%= f %>
<% end %>

<% %w{toURL toInternalURL}.each do |f| %>
foreign import javascript unsafe
  "$1.<%= f %>()"
  js_<%= f %> :: Entry a -> JSString
<%= f %>      :: Entry a -> String
<%= f %> = fromJSString . js_<%= f %>
<% end %>

foreign import javascript unsafe
  "$1.isFile" isFile :: Entry a -> Bool

foreign import javascript unsafe
  "$1.isDirectory" isDirectory :: Entry a -> Bool

classifyEntry :: Entry a -> Either (Entry File) (Entry Dir)
classifyEntry e
  | isFile      e = Left  $ castRef e
  | isDirectory e = Right $ castRef e
  | otherwise     = error "classifyEntry: Entry is neither File nor Dir"

genericEntry :: Entry a -> Entry ()
genericEntry = castRef

<%= makeRecord('Metadata', [
  Field.new('UTCTime', 'modificationTime'),
], false) %>

<%= twoCallbacks(nil,
  '$1.getMetadata(hs_good($c), hs_error($c));',
  ['Entry a'], 'FileError', 'Metadata',
) %>

-- TODO: setMetadata

<%= twoCallbacks(nil,
  '$1.remove(hs_good($c), hs_error($c));',
  ['Entry a'], 'FileError', '()',
) %>

<%= twoCallbacks(nil,
  '$1.removeRecursively(hs_good($c), hs_error($c));',
  ['Entry Dir'], 'FileError', '()',
) %>

<% %w{moveTo copyTo}.each do |f| %>
<%= twoCallbacks(nil,
  "$1.#{f}(hs_good($c), hs_error($c));",
  ['Entry Dir', 'Maybe FilePath', 'Entry a'], 'FileError', 'Entry a',
) %>
<% end %>

<%= twoCallbacks(nil,
  '$1.getParent(hs_good($c), hs_error($c));',
  ['Entry a'], 'FileError', 'Entry Dir',
) %>

<%= twoCallbacks(nil,
  'resolveLocalFileSystemURL($1, hs_good($c), hs_error($c));',
  ['String'], 'FileError', 'Entry ()',
) %>

<%= makeEnum('GetFlags', [
  Tag.new('Exclusive', '{create: true, exclusive: true}' ),
  Tag.new('Create'   , '{create: true, exclusive: false}'),
  Tag.new('NoCreate' , '{create: false}'                 ),
]) %>

<%= twoCallbacks(nil,
  '$3.getFile($1, $2, hs_good($c), hs_error($c));',
  ['FilePath', 'GetFlags', 'Entry Dir'], 'FileError', 'Entry File',
) %>

<%= twoCallbacks(nil,
  '$3.getDirectory($1, $2, hs_good($c), hs_error($c));',
  ['FilePath', 'GetFlags', 'Entry Dir'], 'FileError', 'Entry Dir',
) %>

data DirReader_
type DirReader = JSRef DirReader_

foreign import javascript unsafe
  "$1.createReader()"
  createReader :: Entry Dir -> IO DirReader

<%= twoCallbacks(nil,
  '$1.readEntries(hs_good($c), hs_error($c));',
  ['DirReader'], 'FileError', '[Entry ()]',
) %>

readAllEntries :: Entry Dir -> IO (Either FileError [Entry ()])
readAllEntries dir = do
  r <- createReader dir
  let go ents = readEntries r >>= \res -> case res of
        Left e -> return $ Left e
        Right [] -> return $ Right ents
        Right ents' -> go $ ents' ++ ents
  go []

data FileObject_
type FileObject = JSRef FileObject_

<%= twoCallbacks(nil,
  '$1.file(hs_good($c), hs_error($c));',
  ['Entry File'], 'FileError', 'FileObject',
) %>

<% %w{readAsText readAsBinaryString readAsDataURL}.each do |f| %>
foreign import javascript interruptible
  "hs_readFile('<%= f %>', $1, $c);"
  js_<%= f %> :: FileObject -> IO JSString
<%= f %>      :: FileObject -> IO String
<%= f %> = fmap fromJSString . js_<%= f %>
<% end %>
