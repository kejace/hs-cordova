<%
require File.expand_path(File.dirname(__FILE__) + '/../../../../rb/data.rb')
%>
{-# LANGUAGE JavaScriptFFI #-}
module System.Cordova.Geolocation
( Coordinates(..)
, Position(..)
, PositionError(..)
, PositionErrorCode(..)
, GeolocationOptions(..)
, getCurrentPosition
, watchPosition
) where

import GHCJS.Types
import GHCJS.Marshal
import Data.Time.Clock
import System.Cordova.EventListener
<%= hsImports %>

<%= jsImport(
  'navigator.geolocation.getCurrentPosition(hs_good($c), hs_error($c), $1);',
  ['GeolocationOptions'], 'Either PositionError Position',
) %>

<%= makeRecord('Coordinates', [
  Field.new('Maybe Double', 'latitude'),
  Field.new('Maybe Double', 'longitude'),
  Field.new('Maybe Double', 'altitude'),
  Field.new('Maybe Double', 'accuracy'),
  Field.new('Maybe Double', 'altitudeAccuracy'),
  Field.new('Maybe Double', 'heading'),
  Field.new('Maybe Double', 'speed'),
]) %>

<%= makeRecord('Position', [
  Field.new('Coordinates', 'coords'),
  Field.new('UTCTime', 'timestamp'),
], instanceDefault: false) %>

<%= makeRecord('PositionError', [
  Field.new('PositionErrorCode', 'code'),
  Field.new('String', 'message'),
], instanceDefault: false) %>

<%= makeEnum('PositionErrorCode', [
  Tag.new('PermissionDenied'   , jsExpr: 'PERMISSION_DENIED'   ),
  Tag.new('PositionUnavailable', jsExpr: 'POSITION_UNAVAILABLE'),
  Tag.new('Timeout'            , jsExpr: 'TIMEOUT'             ),
], exprPrefix: 'PositionError.') %>

<%= makeRecord('GeolocationOptions', [
  Field.new('Maybe Bool', 'enableHighAccuracy'),
  Field.new('Maybe Double', 'timeout'),
  Field.new('Maybe Double', 'maximumAge'),
]) %>

foreign import javascript unsafe
  "navigator.geolocation.watchPosition($2, $3, $1)"
  js_watchPosition
  :: JSRef GeolocationOptions
  -> JSFun (JSRef Position -> IO ())
  -> JSFun (JSRef PositionError -> IO ())
  -> IO (JSRef String)

foreign import javascript unsafe
  "navigator.geolocation.clearWatch($1);"
  js_clearWatch :: JSRef String -> IO ()

watchPosition
  :: GeolocationOptions
  -> (Either PositionError Position -> IO ())
  -> IO (IO ())
watchPosition opts f = do
  opts' <- toJSRef opts
  globalListener (js_watchPosition opts') js_clearWatch f
